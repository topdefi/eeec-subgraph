// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CirculatingSupply extends ethereum.SmartContract {
  static bind(address: Address): CirculatingSupply {
    return new CirculatingSupply("CirculatingSupply", address);
  }

  EEEC(): Address {
    let result = super.call("EEEC", "EEEC():(address)", []);

    return result[0].toAddress();
  }

  try_EEEC(): ethereum.CallResult<Address> {
    let result = super.tryCall("EEEC", "EEEC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  EEECCirculatingSupply(): BigInt {
    let result = super.call(
      "EEECCirculatingSupply",
      "EEECCirculatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_EEECCirculatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EEECCirculatingSupply",
      "EEECCirculatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonCirculatingEEEC(): BigInt {
    let result = super.call(
      "getNonCirculatingEEEC",
      "getNonCirculatingEEEC():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNonCirculatingEEEC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNonCirculatingEEEC",
      "getNonCirculatingEEEC():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialize(_pal: Address): boolean {
    let result = super.call("initialize", "initialize(address):(bool)", [
      ethereum.Value.fromAddress(_pal)
    ]);

    return result[0].toBoolean();
  }

  try_initialize(_pal: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialize", "initialize(address):(bool)", [
      ethereum.Value.fromAddress(_pal)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonCirculatingEEECAddresses(param0: BigInt): Address {
    let result = super.call(
      "nonCirculatingEEECAddresses",
      "nonCirculatingEEECAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_nonCirculatingEEECAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonCirculatingEEECAddresses",
      "nonCirculatingEEECAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setNonCirculatingEEECAddresses(
    _nonCirculatingAddresses: Array<Address>
  ): boolean {
    let result = super.call(
      "setNonCirculatingEEECAddresses",
      "setNonCirculatingEEECAddresses(address[]):(bool)",
      [ethereum.Value.fromAddressArray(_nonCirculatingAddresses)]
    );

    return result[0].toBoolean();
  }

  try_setNonCirculatingEEECAddresses(
    _nonCirculatingAddresses: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setNonCirculatingEEECAddresses",
      "setNonCirculatingEEECAddresses(address[]):(bool)",
      [ethereum.Value.fromAddressArray(_nonCirculatingAddresses)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferOwnership(_owner: Address): boolean {
    let result = super.call(
      "transferOwnership",
      "transferOwnership(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBoolean();
  }

  try_transferOwnership(_owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferOwnership",
      "transferOwnership(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _pal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetNonCirculatingEEECAddressesCall extends ethereum.Call {
  get inputs(): SetNonCirculatingEEECAddressesCall__Inputs {
    return new SetNonCirculatingEEECAddressesCall__Inputs(this);
  }

  get outputs(): SetNonCirculatingEEECAddressesCall__Outputs {
    return new SetNonCirculatingEEECAddressesCall__Outputs(this);
  }
}

export class SetNonCirculatingEEECAddressesCall__Inputs {
  _call: SetNonCirculatingEEECAddressesCall;

  constructor(call: SetNonCirculatingEEECAddressesCall) {
    this._call = call;
  }

  get _nonCirculatingAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetNonCirculatingEEECAddressesCall__Outputs {
  _call: SetNonCirculatingEEECAddressesCall;

  constructor(call: SetNonCirculatingEEECAddressesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
