// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Rebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakedPals", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("percentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("contract", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rebase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Rebase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Rebase", id.toString(), this);
    }
  }

  static load(id: string): Rebase | null {
    return changetype<Rebase | null>(store.get("Rebase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get stakedPals(): BigDecimal {
    let value = this.get("stakedPals");
    return value!.toBigDecimal();
  }

  set stakedPals(value: BigDecimal) {
    this.set("stakedPals", Value.fromBigDecimal(value));
  }

  get percentage(): BigDecimal {
    let value = this.get("percentage");
    return value!.toBigDecimal();
  }

  set percentage(value: BigDecimal) {
    this.set("percentage", Value.fromBigDecimal(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class ProtocolMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("palCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("sPalCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("palPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryInvestments", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextEpochRebase", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextDistributedPal", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryUsdtRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryBUSDFreeValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryBUSDRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryUsdtMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryStableFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryBUSDMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryUsdcMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("runwayCurrent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryPalBusdPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryPalAvaxPOL", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProtocolMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProtocolMetric", id.toString(), this);
    }
  }

  static load(id: string): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(store.get("ProtocolMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get palCirculatingSupply(): BigDecimal {
    let value = this.get("palCirculatingSupply");
    return value!.toBigDecimal();
  }

  set palCirculatingSupply(value: BigDecimal) {
    this.set("palCirculatingSupply", Value.fromBigDecimal(value));
  }

  get sPalCirculatingSupply(): BigDecimal {
    let value = this.get("sPalCirculatingSupply");
    return value!.toBigDecimal();
  }

  set sPalCirculatingSupply(value: BigDecimal) {
    this.set("sPalCirculatingSupply", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get palPrice(): BigDecimal {
    let value = this.get("palPrice");
    return value!.toBigDecimal();
  }

  set palPrice(value: BigDecimal) {
    this.set("palPrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get treasuryRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryRiskFreeValue(value: BigDecimal) {
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMarketValue(): BigDecimal {
    let value = this.get("treasuryMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMarketValue(value: BigDecimal) {
    this.set("treasuryMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryInvestments(): BigDecimal {
    let value = this.get("treasuryInvestments");
    return value!.toBigDecimal();
  }

  set treasuryInvestments(value: BigDecimal) {
    this.set("treasuryInvestments", Value.fromBigDecimal(value));
  }

  get nextEpochRebase(): BigDecimal {
    let value = this.get("nextEpochRebase");
    return value!.toBigDecimal();
  }

  set nextEpochRebase(value: BigDecimal) {
    this.set("nextEpochRebase", Value.fromBigDecimal(value));
  }

  get nextDistributedPal(): BigDecimal {
    let value = this.get("nextDistributedPal");
    return value!.toBigDecimal();
  }

  set nextDistributedPal(value: BigDecimal) {
    this.set("nextDistributedPal", Value.fromBigDecimal(value));
  }

  get treasuryUsdtRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryUsdtRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryUsdtRiskFreeValue(value: BigDecimal) {
    this.set("treasuryUsdtRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryBUSDFreeValue(): BigDecimal {
    let value = this.get("treasuryBUSDFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryBUSDFreeValue(value: BigDecimal) {
    this.set("treasuryBUSDFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryBUSDRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryBUSDRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryBUSDRiskFreeValue(value: BigDecimal) {
    this.set("treasuryBUSDRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryUsdtMarketValue(): BigDecimal {
    let value = this.get("treasuryUsdtMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryUsdtMarketValue(value: BigDecimal) {
    this.set("treasuryUsdtMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryStableFreeValue(): BigDecimal {
    let value = this.get("treasuryStableFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryStableFreeValue(value: BigDecimal) {
    this.set("treasuryStableFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryBUSDMarketValue(): BigDecimal {
    let value = this.get("treasuryBUSDMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryBUSDMarketValue(value: BigDecimal) {
    this.set("treasuryBUSDMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryUsdcMarketValue(): BigDecimal {
    let value = this.get("treasuryUsdcMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryUsdcMarketValue(value: BigDecimal) {
    this.set("treasuryUsdcMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryDaiMarketValue(): BigDecimal {
    let value = this.get("treasuryDaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDaiMarketValue(value: BigDecimal) {
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(value));
  }

  get currentAPY(): BigDecimal {
    let value = this.get("currentAPY");
    return value!.toBigDecimal();
  }

  set currentAPY(value: BigDecimal) {
    this.set("currentAPY", Value.fromBigDecimal(value));
  }

  get runwayCurrent(): BigDecimal {
    let value = this.get("runwayCurrent");
    return value!.toBigDecimal();
  }

  set runwayCurrent(value: BigDecimal) {
    this.set("runwayCurrent", Value.fromBigDecimal(value));
  }

  get treasuryPalBusdPOL(): BigDecimal {
    let value = this.get("treasuryPalBusdPOL");
    return value!.toBigDecimal();
  }

  set treasuryPalBusdPOL(value: BigDecimal) {
    this.set("treasuryPalBusdPOL", Value.fromBigDecimal(value));
  }

  get treasuryPalAvaxPOL(): BigDecimal {
    let value = this.get("treasuryPalAvaxPOL");
    return value!.toBigDecimal();
  }

  set treasuryPalAvaxPOL(value: BigDecimal) {
    this.set("treasuryPalAvaxPOL", Value.fromBigDecimal(value));
  }
}

export class LastBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("number", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LastBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LastBlock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LastBlock", id.toString(), this);
    }
  }

  static load(id: string): LastBlock | null {
    return changetype<LastBlock | null>(store.get("LastBlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
